// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
const SquareVerifier = artifacts.require('SquareVerifier');
const proofJson = require('./proof.json');


// Test verification with correct proof
// - use the contents from proof.json generated from zokrates steps

    
// Test verification with incorrect proof
contract('TestSquareVerifier', accounts => {

    const account_one = accounts[0];
    const account_two = accounts[1];

    describe('proof', function () {
        beforeEach(async function () { 
            this.contract = await SquareVerifier.new({from: account_one});
        })

        it('should pass with correct proof', async function () {
            let result = await this.contract.verifyTx.call(proofJson.proof.a,proofJson.proof.b,proofJson.proof.c,proofJson.inputs);
            assert.equal(result,true,"proof failed")
        })

        it('should fail with incorrect proof', async function () {
            const inputs = ["0x0000000000000000000000000000000000000000000000000000000000000008", "0x0000000000000000000000000000000000000000000000000000000000000001"]
            let result = await this.contract.verifyTx.call(proofJson.proof.a,proofJson.proof.b,proofJson.proof.c,inputs);
            assert.equal(result,false,"proof passed")
        })
    });
})